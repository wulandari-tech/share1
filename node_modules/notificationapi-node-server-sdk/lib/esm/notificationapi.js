var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import axios from 'axios';
import { createHmac } from 'crypto';
const DEFAULT_BASE_URL = 'https://api.notificationapi.com';
class NotificationAPIService {
    constructor() {
        this.USER_AGENT = 'notificationapi-node-server-sdk';
        this.VERSION = '2.3.2';
        this.clientId = null;
        this.clientSecret = null;
        this.baseURL = DEFAULT_BASE_URL;
        /** To configure and initialize the the SDK*/
        this.init = (clientId, clientSecret, config) => {
            if (!clientId) {
                throw 'Bad clientId';
            }
            if (!clientSecret) {
                throw 'Bad clientSecret';
            }
            if (config === null || config === void 0 ? void 0 : config.baseURL) {
                this.baseURL = config.baseURL;
            }
            else {
                this.baseURL = DEFAULT_BASE_URL;
            }
            this.clientId = clientId;
            this.clientSecret = clientSecret;
        };
        /** used to identify your user */
        this.identifyUser = (user) => __awaiter(this, void 0, void 0, function* () {
            const { id } = user, userData = __rest(user, ["id"]);
            const hashedUserId = `${createHmac('sha256', this.clientSecret)
                .update(id)
                .digest('base64')}`;
            const customAuthorization = 'Basic ' +
                Buffer.from(`${this.clientId}:${id}:${hashedUserId}`).toString('base64');
            return this.request('POST', `users/${encodeURIComponent(id)}`, userData, customAuthorization);
        });
        /** Used to send a notification to the specified user. */
        this.send = (sendRequest) => __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', 'sender', sendRequest);
        });
        /** Un-sending or deleting notifications: Sometimes you need older notifications to be deleted for a certain user. For example when a notification is not valid anymore. The retract function helps you do this. */
        this.retract = (retractRequest) => __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', 'sender/retract', retractRequest);
        });
        /** create a query on logs */
        this.queryLogs = (params) => __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', 'logs/query', params);
        });
        /** Used to create a subNotification of a specified notification. */
        this.createSubNotification = (params) => __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', `notifications/${params.notificationId}/subNotifications/${params.subNotificationId}`, { title: params.title });
        });
        /** Used to delete a subNotification from a specified notification. */
        this.deleteSubNotification = (params) => __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', `notifications/${params.notificationId}/subNotifications/${params.subNotificationId}`);
        });
        /** Used to set notification preferences from a specified user. */
        this.setUserPreferences = (
        /** The ID of the user in your system. Required.*/
        userId, 
        /** An array of preferences fo the user. Required.*/
        userPreferences) => __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', `user_preferences/${userId}`, userPreferences);
        });
        /** Used to delete any stored preferences for a user and notificationId or subNotificationId. */
        this.deleteUserPreferences = (
        /** The ID of the user in your system. Required.*/
        userId, 
        /** The ID of the notification in NotificationAPI. Required. */
        notificationId, 
        /** The subNotificationId is used to specify further subcategories within a notification. Optional */
        subNotificationId) => __awaiter(this, void 0, void 0, function* () {
            const hashedUserId = `${createHmac('sha256', this.clientSecret)
                .update(userId)
                .digest('base64')}`;
            const customAuthorization = 'Basic ' +
                Buffer.from(`${this.clientId}:${userId}:${hashedUserId}`).toString('base64');
            return this.request('DELETE', `users/${userId}/preferences`, null, customAuthorization, subNotificationId
                ? { notificationId, subNotificationId }
                : { notificationId });
        });
        /** Used to update the opened, archived, ... of an inapp notification. */
        this.updateInAppNotification = (
        /** The ID of the user in your system. Required.*/
        userId, params) => __awaiter(this, void 0, void 0, function* () {
            const hashedUserId = `${createHmac('sha256', this.clientSecret)
                .update(userId)
                .digest('base64')}`;
            const customAuthorization = 'Basic ' +
                Buffer.from(`${this.clientId}:${userId}:${hashedUserId}`).toString('base64');
            return this.request('PATCH', `users/${userId}/notifications/INAPP_WEB`, params, customAuthorization);
        });
        /** Used to update a scheduled notification. */
        this.updateSchedule = (trackingId, sendRequest) => __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', `schedule/${trackingId}`, sendRequest);
        });
        /** Used to to delete a scheduled notification. */
        this.deleteSchedule = (trackingId) => __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', `schedule/${trackingId}`);
        });
        /** A generic function for sending any requests to NotificationAPI.*/
        this.request = (method, uri, data, customAuthorization, queryStrings) => __awaiter(this, void 0, void 0, function* () {
            const authorization = customAuthorization !== null && customAuthorization !== void 0 ? customAuthorization : 'Basic ' +
                Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64');
            try {
                const res = yield axios.request({
                    method,
                    url: `${this.baseURL}/${this.clientId}/${uri}`,
                    params: queryStrings,
                    data,
                    headers: {
                        Authorization: authorization,
                        'User-Agent': `${this.USER_AGENT}/${this.VERSION}`
                    }
                });
                if (res.status === 202) {
                    console.log('NotificationAPI warning.', res.data);
                }
                return res;
            }
            catch (e) {
                console.error('NotificationAPI error.', e);
                throw e;
            }
        });
    }
}
const NotificationAPI = new NotificationAPIService();
export default NotificationAPI;
