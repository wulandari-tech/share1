"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var axios_1 = __importDefault(require("axios"));
var crypto_1 = require("crypto");
var DEFAULT_BASE_URL = 'https://api.notificationapi.com';
var NotificationAPIService = /** @class */ (function () {
    function NotificationAPIService() {
        var _this = this;
        this.USER_AGENT = 'notificationapi-node-server-sdk';
        this.VERSION = '2.3.2';
        this.clientId = null;
        this.clientSecret = null;
        this.baseURL = DEFAULT_BASE_URL;
        /** To configure and initialize the the SDK*/
        this.init = function (clientId, clientSecret, config) {
            if (!clientId) {
                throw 'Bad clientId';
            }
            if (!clientSecret) {
                throw 'Bad clientSecret';
            }
            if (config === null || config === void 0 ? void 0 : config.baseURL) {
                _this.baseURL = config.baseURL;
            }
            else {
                _this.baseURL = DEFAULT_BASE_URL;
            }
            _this.clientId = clientId;
            _this.clientSecret = clientSecret;
        };
        /** used to identify your user */
        this.identifyUser = function (user) { return __awaiter(_this, void 0, void 0, function () {
            var id, userData, hashedUserId, customAuthorization;
            return __generator(this, function (_a) {
                id = user.id, userData = __rest(user, ["id"]);
                hashedUserId = "".concat((0, crypto_1.createHmac)('sha256', this.clientSecret)
                    .update(id)
                    .digest('base64'));
                customAuthorization = 'Basic ' +
                    Buffer.from("".concat(this.clientId, ":").concat(id, ":").concat(hashedUserId)).toString('base64');
                return [2 /*return*/, this.request('POST', "users/".concat(encodeURIComponent(id)), userData, customAuthorization)];
            });
        }); };
        /** Used to send a notification to the specified user. */
        this.send = function (sendRequest) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('POST', 'sender', sendRequest)];
            });
        }); };
        /** Un-sending or deleting notifications: Sometimes you need older notifications to be deleted for a certain user. For example when a notification is not valid anymore. The retract function helps you do this. */
        this.retract = function (retractRequest) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('POST', 'sender/retract', retractRequest)];
            });
        }); };
        /** create a query on logs */
        this.queryLogs = function (params) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('POST', 'logs/query', params)];
            });
        }); };
        /** Used to create a subNotification of a specified notification. */
        this.createSubNotification = function (params) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('PUT', "notifications/".concat(params.notificationId, "/subNotifications/").concat(params.subNotificationId), { title: params.title })];
            });
        }); };
        /** Used to delete a subNotification from a specified notification. */
        this.deleteSubNotification = function (params) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('DELETE', "notifications/".concat(params.notificationId, "/subNotifications/").concat(params.subNotificationId))];
            });
        }); };
        /** Used to set notification preferences from a specified user. */
        this.setUserPreferences = function (
        /** The ID of the user in your system. Required.*/
        userId, 
        /** An array of preferences fo the user. Required.*/
        userPreferences) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('POST', "user_preferences/".concat(userId), userPreferences)];
            });
        }); };
        /** Used to delete any stored preferences for a user and notificationId or subNotificationId. */
        this.deleteUserPreferences = function (
        /** The ID of the user in your system. Required.*/
        userId, 
        /** The ID of the notification in NotificationAPI. Required. */
        notificationId, 
        /** The subNotificationId is used to specify further subcategories within a notification. Optional */
        subNotificationId) { return __awaiter(_this, void 0, void 0, function () {
            var hashedUserId, customAuthorization;
            return __generator(this, function (_a) {
                hashedUserId = "".concat((0, crypto_1.createHmac)('sha256', this.clientSecret)
                    .update(userId)
                    .digest('base64'));
                customAuthorization = 'Basic ' +
                    Buffer.from("".concat(this.clientId, ":").concat(userId, ":").concat(hashedUserId)).toString('base64');
                return [2 /*return*/, this.request('DELETE', "users/".concat(userId, "/preferences"), null, customAuthorization, subNotificationId
                        ? { notificationId: notificationId, subNotificationId: subNotificationId }
                        : { notificationId: notificationId })];
            });
        }); };
        /** Used to update the opened, archived, ... of an inapp notification. */
        this.updateInAppNotification = function (
        /** The ID of the user in your system. Required.*/
        userId, params) { return __awaiter(_this, void 0, void 0, function () {
            var hashedUserId, customAuthorization;
            return __generator(this, function (_a) {
                hashedUserId = "".concat((0, crypto_1.createHmac)('sha256', this.clientSecret)
                    .update(userId)
                    .digest('base64'));
                customAuthorization = 'Basic ' +
                    Buffer.from("".concat(this.clientId, ":").concat(userId, ":").concat(hashedUserId)).toString('base64');
                return [2 /*return*/, this.request('PATCH', "users/".concat(userId, "/notifications/INAPP_WEB"), params, customAuthorization)];
            });
        }); };
        /** Used to update a scheduled notification. */
        this.updateSchedule = function (trackingId, sendRequest) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('PATCH', "schedule/".concat(trackingId), sendRequest)];
            });
        }); };
        /** Used to to delete a scheduled notification. */
        this.deleteSchedule = function (trackingId) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.request('DELETE', "schedule/".concat(trackingId))];
            });
        }); };
        /** A generic function for sending any requests to NotificationAPI.*/
        this.request = function (method, uri, data, customAuthorization, queryStrings) { return __awaiter(_this, void 0, void 0, function () {
            var authorization, res, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authorization = customAuthorization !== null && customAuthorization !== void 0 ? customAuthorization : 'Basic ' +
                            Buffer.from("".concat(this.clientId, ":").concat(this.clientSecret)).toString('base64');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, axios_1["default"].request({
                                method: method,
                                url: "".concat(this.baseURL, "/").concat(this.clientId, "/").concat(uri),
                                params: queryStrings,
                                data: data,
                                headers: {
                                    Authorization: authorization,
                                    'User-Agent': "".concat(this.USER_AGENT, "/").concat(this.VERSION)
                                }
                            })];
                    case 2:
                        res = _a.sent();
                        if (res.status === 202) {
                            console.log('NotificationAPI warning.', res.data);
                        }
                        return [2 /*return*/, res];
                    case 3:
                        e_1 = _a.sent();
                        console.error('NotificationAPI error.', e_1);
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        }); };
    }
    return NotificationAPIService;
}());
var NotificationAPI = new NotificationAPIService();
exports["default"] = NotificationAPI;
