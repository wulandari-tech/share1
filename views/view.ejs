<%- include('./partials/header') %>

<div class="max-w-5xl mx-auto space-y-8">
  <article class="bg-gray-800 shadow-xl rounded-xl p-6 md:p-10">
    <header class="mb-6 border-b border-gray-700 pb-6">
      <div class="flex flex-col sm:flex-row justify-between items-start">
        <h1 class="text-4xl md:text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-primary-400 to-pink-500 leading-tight mb-3 sm:mb-0">
          <%= code.title %>
        </h1>
        <% if (currentUser && code.uploader && currentUser._id.toString() === code.uploader._id.toString()) { %>
          <div class="flex space-x-3 flex-shrink-0 self-start sm:self-center mt-2 sm:mt-0">
            <a href="/codes/<%= code._id %>/edit" class="text-sm bg-yellow-500 hover:bg-yellow-600 text-white font-semibold px-4 py-2 rounded-md transition duration-150 flex items-center">
              <i class="fas fa-edit mr-2"></i> Edit
            </a>
            <form action="/codes/<%= code._id %>?_method=DELETE" method="POST" onsubmit="return confirm('Are you sure you want to delete this?');">
              <button type="submit" class="text-sm bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-md transition duration-150 flex items-center">
                <i class="fas fa-trash mr-2"></i> Delete
              </button>
            </form>
          </div>
        <% } %>
      </div>
      <div class="mt-4 text-sm text-gray-400 flex flex-wrap gap-x-4 gap-y-2 items-center">
        <span><i class="fas fa-user mr-1.5 text-primary-400"></i> By <a href="/<%= code.uploader.username.toLowerCase() %>" class="hover:underline"><%= code.uploader ? code.uploader.username : 'Unknown' %></a></span>
        <span><i class="fas fa-calendar-alt mr-1.5 text-primary-400"></i> <%= moment(code.createdAt).format('MMMM D, YYYY') %></span>
        <span><i class="fas fa-tag mr-1.5 text-primary-400"></i> <span class="bg-gray-700 px-2 py-0.5 rounded-full text-xs"><%= code.snippetLanguage %></span></span>
        <span><i class="fas fa-eye mr-1.5 text-primary-400"></i> <%= code.views || 0 %> views</span>
        <% if (!code.isPublic) { %>
          <span class="text-yellow-400"><i class="fas fa-lock mr-1.5"></i> Private Post</span>
        <% } %>
      </div>
    </header>

    <% if (code.description) { %>
      <div class="prose prose-invert prose-sm md:prose-base max-w-none mb-8 text-gray-300">
        <h2 class="text-xl font-semibold text-gray-200 border-b border-gray-700 pb-2 mb-3">Description</h2>
        <p><%- code.description.replace(/\n/g, '<br>') %></p>
      </div>
    <% } %>

    <% if (code.isSnippetTextFile && code.fetchedSnippetContent !== null) { %>
      <div class="mb-8">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-3">
            <h2 class="text-xl font-semibold text-gray-200 mb-2 sm:mb-0">Code Snippet</h2>
            <div class="flex gap-3 flex-wrap">
                <button onclick="copyCode()" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium transition flex items-center">
                    <i class="fas fa-copy mr-2"></i>Copy Code
                </button>
                <a href="/codes/<%= code._id %>/download-snippet" target="_blank" class="bg-teal-600 hover:bg-teal-700 text-white px-4 py-2 rounded-md text-sm font-medium transition flex items-center">
                    <i class="fas fa-file-code mr-2"></i>Download Snippet File
                </a>
            </div>
        </div>
        <pre class="shadow-md"><code id="codeblock" class="language-<%= code.snippetLanguage %>"><%- code.fetchedSnippetContent %></code></pre>
      </div>
    <% } else if (code.isSnippetTextFile && code.fetchedSnippetContent === null && code.fileUrl) { %>
        <div class="mb-8 bg-yellow-900 border border-yellow-700 text-yellow-300 px-4 py-3 rounded relative" role="alert">
            <strong class="font-bold">Note:</strong>
            <span class="block sm:inline">The code snippet content could not be loaded. It might be unavailable or too large.</span>
        </div>
    <% } %>

    <% if (code.fileUrl && !code.isSnippetTextFile) { %>
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-gray-200 mb-3">Associated File</h2>
        <div class="bg-gray-700 p-4 rounded-lg flex items-center justify-between">
          <div class="flex items-center">
            <i class="fas <%= code.fileType && code.fileType.includes('zip') ? 'fa-file-archive' : (code.fileType && code.fileType.includes('image') ? 'fa-file-image' : (code.fileType && code.fileType.includes('pdf') ? 'fa-file-pdf' : 'fa-file-alt')) %> text-2xl text-primary-400 mr-3"></i>
            <span class="text-gray-200"><%= code.fileName || 'Downloadable File' %></span>
          </div>
          <a href="<%= code.fileUrl %>" target="_blank" rel="noopener noreferrer" class="bg-purple-600 hover:bg-purple-700 text-white px-5 py-2.5 rounded-md text-sm font-medium transition flex items-center">
            <i class="fas fa-download mr-2"></i>Download File
          </a>
        </div>
      </div>
    <% } %>
    
    <% if (code.isSnippetTextFile && code.fetchedSnippetContent && (code.snippetLanguage === 'htmlmixed' || code.snippetLanguage === 'html' || code.snippetLanguage === 'xml' || code.snippetLanguage === 'javascript' || code.snippetLanguage === 'css')) { %>
        <div class="my-8 pt-6 border-t border-gray-700" id="client-side-sandbox-area">
            <div class="flex flex-col sm:flex-row justify-between items-center mb-4">
                <h2 class="text-2xl font-semibold text-gray-100 mb-2 sm:mb-0">
                    <i class="fas fa-play-circle mr-2 text-green-400"></i>Live Sandbox (Client-Side)
                </h2>
                <button id="runClientCodeBtn"
                        class="bg-green-600 hover:bg-green-700 text-white font-semibold px-5 py-2.5 rounded-md transition duration-150 flex items-center text-sm">
                    <i class="fas fa-play mr-2"></i> Run Client Code
                </button>
            </div>
    
            <% if (code.snippetLanguage === 'htmlmixed' || code.snippetLanguage === 'html' || code.snippetLanguage === 'xml') { %>
                <p class="text-sm text-gray-400 mb-1">HTML will be rendered directly. Inline CSS & JS will also run.</p>
            <% } else if (code.snippetLanguage === 'javascript') { %>
                <p class="text-sm text-gray-400 mb-1">JavaScript will be executed. Use `console.log()` to see output in your browser's developer console.</p>
            <% } else if (code.snippetLanguage === 'css') { %>
                <p class="text-sm text-gray-400 mb-1">CSS will be applied to a sample HTML structure below.</p>
            <% } %>
            
            <div id="sandboxOutputWrapperClient" class="mt-4 border-2 border-gray-700 rounded-lg overflow-hidden">
                <div class="bg-gray-700 px-4 py-2 text-xs text-gray-300 font-mono">Output / Preview (Client-Side)</div>
                <iframe id="sandboxFrameClient" 
                        class="w-full h-96 bg-white" 
                        sandbox="allow-scripts allow-same-origin" 
                        title="Client-side code execution sandbox">
                </iframe>
            </div>
            <% if (code.snippetLanguage === 'javascript') { %>
                <div class="mt-2 p-3 bg-gray-700 rounded-md text-sm text-gray-300">
                    <p><i class="fas fa-info-circle mr-1.5"></i>Check your browser's developer console (usually F12) for `console.log` outputs and errors from your JavaScript code.</p>
                </div>
            <% } %>
        </div>
    <% } %>

    <% if (code.isSnippetTextFile && code.fetchedSnippetContent) { %>
       <div class="my-8 pt-6 border-t border-gray-700" id="server-side-execution-area">
           <div class="flex flex-col sm:flex-row justify-between items-center mb-4">
               <h2 class="text-2xl font-semibold text-gray-100 mb-2 sm:mb-0">
                   <i class="fas fa-server mr-2 text-blue-400"></i>share code, test code sandbox (copy code nya, masukan ke "Standard Input (stdin):")
               </h2>
               <button id="runServerCodeBtn"
                       class="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2.5 rounded-md transition duration-150 flex items-center text-sm">
                   <i class="fas fa-cogs mr-2"></i> Execute on Server
               </button>
           </div>
           <p class="text-sm text-gray-400 mb-2">
               Supported for: Python, Java, C, C++, JS (Node), Ruby, etc. (Not for HTML/CSS/Plaintext).
           </p>
           
           <div class="mb-3">
               <label for="stdinServer" class="block text-sm font-medium text-gray-300 mb-1">Standard Input (stdin):</label>
               <textarea id="stdinServer" rows="2" placeholder="Enter input for your code (if any)..."
                         class="w-full p-2 rounded-md bg-gray-700 border border-gray-600 text-gray-200 focus:ring-primary-500 focus:border-primary-500 text-sm"></textarea>
           </div>

           <div id="serverOutputWrapper" class="mt-4 border-2 border-gray-600 rounded-lg bg-gray-800">
               <div class="bg-gray-700 px-4 py-2 text-xs text-gray-300 font-mono flex justify-between items-center">
                   <span>Server Execution Output:</span>
                   <span id="executionStatus" class="px-2 py-0.5 rounded text-xs"></span>
               </div>
               <div class="p-4">
                   <h4 class="text-sm font-semibold text-gray-400 mb-1">STDOUT:</h4>
                   <pre id="stdoutServer" class="min-h-[50px] max-h-60 overflow-y-auto bg-gray-900 p-3 rounded text-sm text-gray-200 whitespace-pre-wrap"></pre>
                   <h4 class="text-sm font-semibold text-gray-400 mt-3 mb-1">STDERR / Compile Output / Errors:</h4>
                   <pre id="stderrServer" class="min-h-[30px] max-h-40 overflow-y-auto bg-gray-900 p-3 rounded text-sm text-red-400 whitespace-pre-wrap"></pre>
                   <div class="text-xs text-gray-500 mt-3 flex justify-between">
                       <span id="executionTime"></span>
                       <span id="executionMemory"></span>
                   </div>
               </div>
           </div>
            <div id="serverExecutionSpinner" class="hidden text-center py-4">
                <i class="fas fa-spinner fa-spin fa-2x text-primary-400"></i>
                <p class="text-sm text-gray-400 mt-2">Executing code on server, please wait...</p>
            </div>
       </div>
   <% } %>


    <div class="my-6 flex flex-wrap items-center gap-x-4 gap-y-2">
      <form action="/codes/<%= code._id %>/like" method="POST">
        <% let userHasLiked = false; %>
        <% if(currentUser && code.likes && code.likes.some(like => like.toString() === currentUser._id.toString())) { userHasLiked = true; } %>
        <button type="submit" class="like-button <%= userHasLiked ? 'liked' : '' %>">
          <i class="fas fa-heart mr-2"></i> 
          <span><%= userHasLiked ? 'Unlike' : 'Like' %></span>
        </button>
      </form>
      <span class="text-gray-400 text-lg"><%= code.likes ? code.likes.length : 0 %> Likes</span>
      <% if (currentUser && code.uploader && currentUser._id.toString() === code.uploader._id.toString()) { %>
        <form action="/codes/<%= code._id %>/export-gist" method="POST">
            <button type="submit" class="bg-gray-600 hover:bg-gray-500 text-white px-4 py-2 rounded-md text-sm font-medium transition flex items-center
                <%= (code.uploader.githubId && code.uploader.githubAccessToken) ? '' : 'opacity-50 cursor-not-allowed' %>"
                <%- (code.uploader.githubId && code.uploader.githubAccessToken) ? '' : 'disabled title="Link GitHub account in your profile to enable Gist export."' %>>
                <i class="fab fa-github mr-2"></i> Export to Gist
            </button>
        </form>
      <% } %>
    </div>

    <div id="comments-section" class="mt-10 pt-6 border-t border-gray-700">
      <h2 class="text-2xl font-semibold text-gray-100 mb-6">Comments (<%= comments.length %>)</h2>
      <% if (currentUser) { %>
        <form action="/codes/<%= code._id %>/comments" method="POST" class="mb-8 bg-gray-700 p-4 rounded-lg shadow">
          <div class="mb-3">
            <label for="commentText" class="block text-sm font-medium text-gray-300 mb-1">Add a comment</label>
            <textarea name="comment[text]" id="commentText" rows="3" required
                      class="w-full p-3 rounded-md bg-gray-600 border border-gray-500 text-gray-100 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                      placeholder="Write your thoughts..."></textarea>
          </div>
          <button type="submit" class="bg-primary-600 hover:bg-primary-700 text-white font-semibold px-6 py-2.5 rounded-md transition duration-150">
            <i class="fas fa-paper-plane mr-2"></i>Post Comment
          </button>
        </form>
      <% } else { %>
        <p class="mb-8 text-gray-400">
          <a href="/login?redirect=/codes/view/<%= code._id %>" class="text-primary-400 hover:underline font-semibold">Login</a> to post a comment.
        </p>
      <% } %>

      <div class="space-y-6">
        <% if (comments.length > 0) { %>
          <% comments.forEach(comment => { %>
            <div class="comment bg-gray-700/50 p-4 rounded-lg shadow transition-shadow hover:shadow-md">
              <div class="flex justify-between items-center mb-2">
                <p class="text-sm text-gray-300 font-semibold">
                  <a href="/<%= comment.author.id.username.toLowerCase() %>" class="hover:underline inline-flex items-center">
                    <% if (comment.author.id.avatar && comment.author.id.avatar.url) { %>
                        <img src="<%= comment.author.id.avatar.url %>" alt="<%= comment.author.username %>" class="w-6 h-6 rounded-full object-cover mr-2">
                    <% } else { %>
                        <span class="w-6 h-6 rounded-full bg-gray-600 flex items-center justify-center text-xs text-gray-400 mr-2"><i class="fas fa-user"></i></span>
                    <% } %>
                    <%= comment.author.username %>
                  </a>
                </p>
                <p class="text-xs text-gray-500"><%= moment(comment.createdAt).fromNow() %></p>
              </div>
              <p class="text-gray-200 whitespace-pre-wrap"><%- comment.text.replace(/\n/g, '<br>') %></p>
              <% if (currentUser && comment.author.id._id.toString() === currentUser._id.toString()) { %>
                <form action="/codes/<%= code._id %>/comments/<%= comment._id %>?_method=DELETE" method="POST" class="mt-2 text-right" onsubmit="return confirm('Delete this comment?');">
                  <button type="submit" class="text-xs text-red-500 hover:text-red-400 hover:underline delete-comment-btn">
                    <i class="fas fa-trash-alt mr-1"></i>Delete
                  </button>
                </form>
              <% } %>
            </div>
          <% }) %>
        <% } else { %>
          <p class="text-gray-500 italic">No comments yet. Be the first to comment!</p>
        <% } %>
      </div>
    </div>

  </article>

  <div class="text-center mt-8">
    <a href="/" class="bg-gray-600 hover:bg-gray-500 text-white font-semibold px-6 py-3 rounded-md transition duration-150">
      <i class="fas fa-arrow-left mr-2"></i> Back to All Codes
    </a>
  </div>
</div>

<div id="copy-toast" class="fixed bottom-5 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-md opacity-0 transition-opacity duration-300 z-[100]">
  Code copied to clipboard!
</div>

<script>
  function getDisplayedCodeContentFromCodeblock() {
    const codeblock = document.getElementById("codeblock");
    return codeblock ? codeblock.innerText : null;
  }

  function copyCode() {
    const codeText = getDisplayedCodeContentFromCodeblock();
    if (codeText === null || codeText.trim() === '') {
      alert("No code content to copy.");
      return;
    }
    navigator.clipboard.writeText(codeText).then(() => {
      const toast = document.getElementById('copy-toast');
      toast.classList.remove('opacity-0');
      setTimeout(() => {
        toast.classList.add('opacity-0');
      }, 2000);
    }).catch(err => {
      console.error('Failed to copy: ', err);
      alert("Failed to copy code.");
    });
  }
  
  const runClientCodeBtn = document.getElementById('runClientCodeBtn');
  if (runClientCodeBtn) {
      runClientCodeBtn.addEventListener('click', () => {
          const codeContent = getDisplayedCodeContentFromCodeblock(); 
          const iframe = document.getElementById("sandboxFrameClient");
          const language = "<%= code.snippetLanguage %>";

          if (!iframe) {
              console.error("Client sandbox iframe not found!");
              return;
          }
          if (!codeContent) {
              iframe.srcdoc = "<p style='color:red; padding:10px; font-family: sans-serif;'>No code to run.</p>";
              return;
          }

          let htmlToLoadInIframe = "";

          if (language === 'htmlmixed' || language === 'html' || language === 'xml') {
              htmlToLoadInIframe = codeContent;
          } else if (language === 'javascript') {
              htmlToLoadInIframe = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>JS Sandbox</title>
                      <style>body { font-family: sans-serif; padding: 10px; color: #333; background-color: #fff; word-break: break-all; }</style>
                  </head>
                  <body>
                      <p style="margin-bottom: 10px; font-size: 0.9em; color: #555;">JavaScript is running. Check browser console (F12) for output.</p>
                      <div id="output" style="border-top: 1px solid #eee; padding-top:10px;"></div>
                      <script>
                          const originalLog = console.log;
                          const outputDiv = document.getElementById('output');
                          console.log = function(...args) {
                              originalLog.apply(console, args);
                              const p = document.createElement('p');
                              p.textContent = args.map(arg => typeof arg === 'object' ? JSON.stringify(arg, null, 2) : arg).join(' ');
                              if (outputDiv) outputDiv.appendChild(p);
                          };
                          try {
                              ${codeContent}
                          } catch (e) {
                              console.error("Sandbox Execution Error:", e);
                              const errorP = document.createElement('p');
                              errorP.style.color = 'red';
                              errorP.style.fontWeight = 'bold';
                              errorP.textContent = 'RUNTIME ERROR: ' + e.message;
                              if (outputDiv) outputDiv.appendChild(errorP);
                              else document.body.appendChild(errorP);
                          }
                      <\/script>
                  </body>
                  </html>
              `;
          } else if (language === 'css') {
              htmlToLoadInIframe = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>CSS Sandbox</title>
                      <style>
                          body { font-family: sans-serif; margin: 0; padding: 20px; background-color: #fff; color: #333; }
                          .sample-container { border: 1px dashed #ccc; padding: 15px; background-color: #f9f9f9;}
                          .sample-box { width: 100px; height: 100px; background-color: lightblue; margin: 10px; text-align:center; line-height:100px; display:inline-block; border: 1px solid #aaa;}
                          .sample-button { padding: 8px 15px; margin: 10px; border: 1px solid #aaa; background-color: #e0e0e0; cursor: pointer; }
                          ${codeContent} 
                      </style>
                  </head>
                  <body>
                      <div class="sample-container">
                          <h1 class="sample-heading">Sample Heading H1</h1>
                          <p class="sample-paragraph">This is some sample text to style. <span>This is a span.</span> Lorem ipsum dolor sit amet.</p>
                          <div class="sample-box box1">Box 1</div>
                          <div class="sample-box box2">Box 2</div>
                          <button class="sample-button">A Button</button>
                      </div>
                  </body>
                  </html>
              `;
          } else {
              htmlToLoadInIframe = "<p style='color:orange; padding:10px; font-family: sans-serif;'>Preview/execution for this language is not supported client-side.</p>";
          }
          iframe.srcdoc = ' ';
          setTimeout(() => {
              iframe.srcdoc = htmlToLoadInIframe;
          }, 50);
          
          const sandboxArea = document.getElementById("client-side-sandbox-area");
          if (sandboxArea) {
              const outputWrapper = document.getElementById("sandboxOutputWrapperClient");
              if (outputWrapper) {
                  outputWrapper.scrollIntoView({ behavior: "smooth", block: "nearest" });
              }
          }
      });
  }

  const runServerCodeBtn = document.getElementById('runServerCodeBtn');
   const stdinServerEl = document.getElementById('stdinServer');
   const stdoutServerEl = document.getElementById('stdoutServer');
   const stderrServerEl = document.getElementById('stderrServer');
   const executionStatusEl = document.getElementById('executionStatus');
   const executionTimeEl = document.getElementById('executionTime');
   const executionMemoryEl = document.getElementById('executionMemory');
   const serverExecutionSpinner = document.getElementById('serverExecutionSpinner');

   if (runServerCodeBtn) {
       runServerCodeBtn.addEventListener('click', async () => {
           const codeContentToExecute = getDisplayedCodeContentFromCodeblock();
           const language = "<%= code.snippetLanguage %>";
           const stdinValue = stdinServerEl ? stdinServerEl.value : "";

           if (!codeContentToExecute) {
               alert("No code content to execute.");
               return;
           }

           if (stdoutServerEl) stdoutServerEl.textContent = '';
           if (stderrServerEl) stderrServerEl.textContent = '';
           if (executionStatusEl) executionStatusEl.textContent = '';
           if (executionTimeEl) executionTimeEl.textContent = '';
           if (executionMemoryEl) executionMemoryEl.textContent = '';
           if (serverExecutionSpinner) serverExecutionSpinner.classList.remove('hidden');
           runServerCodeBtn.disabled = true;
           runServerCodeBtn.classList.add('opacity-50', 'cursor-not-allowed');

           try {
               const codeIdForExecution = "<%= code._id %>";
               const executionUrl = `/codes/${codeIdForExecution}/execute-judge0`;

               const response = await fetch(executionUrl, {
                   method: 'POST',
                   headers: { 'Content-Type': 'application/json' },
                   body: JSON.stringify({
                       codeContent: codeContentToExecute,
                       language: language,
                       stdin: stdinValue
                   })
               });
               
               const responseText = await response.text();
               let result;

               if (serverExecutionSpinner) serverExecutionSpinner.classList.add('hidden');
               runServerCodeBtn.disabled = false;
               runServerCodeBtn.classList.remove('opacity-50', 'cursor-not-allowed');

               try {
                    result = JSON.parse(responseText);
               } catch (jsonParseError) {
                    console.error("Failed to parse JSON response from server for Judge0:", jsonParseError);
                    console.error("Non-JSON Response Text (Judge0):", responseText);
                    if (stderrServerEl) stderrServerEl.textContent = 'Server returned an invalid response. Raw response: ' + responseText.substring(0, 300) + (responseText.length > 300 ? "..." : "");
                    if (executionStatusEl) {
                        executionStatusEl.textContent = 'Server Error';
                        executionStatusEl.className = 'px-2 py-0.5 rounded text-xs bg-red-600 text-white';
                    }
                    return;
               }

               if (result && result.success) {
                   if (stdoutServerEl) stdoutServerEl.textContent = result.output || '';
                   let errorOutput = '';
                   if (result.stderr) errorOutput += result.stderr + '\n';
                   if (result.compile_output) errorOutput += "Compile Output:\n" + result.compile_output;
                   if (result.message && result.status && !result.status.toLowerCase().includes('accepted')) {
                        errorOutput += (errorOutput ? '\n' : '') + `Message: ${result.message}`;
                   }
                   if (stderrServerEl) stderrServerEl.textContent = errorOutput.trim() || '';
                   
                   if (executionStatusEl) {
                       executionStatusEl.textContent = result.status || 'Completed';
                       executionStatusEl.className = 'px-2 py-0.5 rounded text-xs';
                       if (result.status && result.status.toLowerCase().includes('accepted')) {
                           executionStatusEl.classList.add('bg-green-600', 'text-white');
                       } else if (result.status && (result.status.toLowerCase().includes('error') || result.status.toLowerCase().includes('wrong') || result.status.toLowerCase().includes('exception'))) {
                           executionStatusEl.classList.add('bg-red-600', 'text-white');
                       } else {
                           executionStatusEl.classList.add('bg-yellow-500', 'text-black');
                       }
                   }
                   if (executionTimeEl) executionTimeEl.textContent = result.time ? `Time: ${parseFloat(result.time).toFixed(3)}s` : '';
                   if (executionMemoryEl) executionMemoryEl.textContent = result.memory ? `Memory: ${Math.round(result.memory / 1024)}KB` : '';

               } else {
                   if (stderrServerEl) stderrServerEl.textContent = result.error || 'An unknown error occurred during execution on the server.';
                   if (result.details) {
                       stderrServerEl.textContent += `\nDetails: ${JSON.stringify(result.details, null, 2)}`;
                   }
                   if (executionStatusEl) {
                        executionStatusEl.textContent = result.message || 'Execution Failed';
                        executionStatusEl.className = 'px-2 py-0.5 rounded text-xs bg-red-600 text-white';
                   }
               }
           } catch (err) {
               console.error("Fetch network error for server execution:", err);
               if (serverExecutionSpinner) serverExecutionSpinner.classList.add('hidden');
               runServerCodeBtn.disabled = false;
               runServerCodeBtn.classList.remove('opacity-50', 'cursor-not-allowed');
               if (stderrServerEl) stderrServerEl.textContent = 'Failed to connect to the server or network error. ' + err.message;
                if (executionStatusEl) {
                    executionStatusEl.textContent = 'Network Error';
                    executionStatusEl.className = 'px-2 py-0.5 rounded text-xs bg-red-600 text-white';
                }
           }
       });
   }
</script>

<%- include('./partials/footer') %>